AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM Template for a tax management system incorporating serverless functions with DynamoDB.'

Globals:
  Function:
    Timeout: 60
    Runtime: python3.8

Parameters:
  TablePrefix:
    Type: String
    Default: 'scripts-ir'
  Region:
    Type: String
    Default: 'us-east-1'
  AWSEnv:
    Type: String
    Default: 'AWS'

Resources:
  ContractsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${TablePrefix}-contracts'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'date'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
        - AttributeName: 'date'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST

  TaxIrParticipants:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${TablePrefix}-participants'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'documentNumber'
          AttributeType: 'S'
        - AttributeName: 'contractId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'DocumentNumberIndex'
          KeySchema:
            - AttributeName: 'documentNumber'
              KeyType: 'HASH'
          Projection:
            ProjectionType: 'ALL'
        - IndexName: 'ContractIdIndex'
          KeySchema:
            - AttributeName: 'contractId'
              KeyType: 'HASH'
          Projection:
            ProjectionType: 'ALL'
      BillingMode: PAY_PER_REQUEST

  TaxIrInstallments:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${TablePrefix}-installments'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'contractId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'ContractIdIndex'
          KeySchema:
            - AttributeName: 'contractId'
              KeyType: 'HASH'
          Projection:
            ProjectionType: 'ALL'
      BillingMode: PAY_PER_REQUEST

  TaxIrBalance:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${TablePrefix}-balance'
      AttributeDefinitions:
        - AttributeName: 'contractId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'contractId'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST

  GetContractFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub 'scripts-ir-GetContractFunction'
      CodeUri: src/Contracts/get_contract/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref ContractsTable
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateContracts:
          Type: Api
          Properties:
            Path: /Contracts/{id}
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractsTable

  ListContractsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/Contracts/list_contract/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref ContractsTable
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateContracts:
          Type: Api
          Properties:
            Path: /Contracts/
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractsTable

  UpdateContractFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub 'scripts-ir-UpdateContractFunction'
      CodeUri: src/Contracts/update_contract/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref ContractsTable
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateContracts:
          Type: Api
          Properties:
            Path: /Contracts/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractsTable

  DeleteContractFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub 'scripts-ir-DeleteContractFunction'
      CodeUri: src/Contracts/delete_contract/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref ContractsTable
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateContracts:
          Type: Api
          Properties:
            Path: /Contracts/{id}/{date}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractsTable

  CreateContractFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub 'scripts-ir-CreateContractFunction'
      CodeUri: src/Contracts/create_contract/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE: !Ref ContractsTable
          REGION: !Ref Region
          AWSENV: !Ref AWSEnv
      Events:
        CreateContracts:
          Type: Api
          Properties:
            Path: /Contracts
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractsTable
